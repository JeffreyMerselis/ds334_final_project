---
title: "Alone"
author: "Jeffrey Merselis"
execute: 
  warning: false
format: 
  html:
    embed-resources: true
    toc: true
    theme: darkly
---

```{r}
library(tidyverse)
library(shiny)
```

```{r}
survivalists <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/survivalists.csv')
loadouts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/loadouts.csv')
episodes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/episodes.csv')
seasons <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/seasons.csv')

# view(survivalists)
# view(loadouts)
# view(episodes)
# view(seasons)

filtered_season <- 1
```

# Winner VS Loser Items Test Plot

```{r}
filtered_season <- 9

winner <- survivalists |>
  filter(season == filtered_season, result == 1) |>
  select(name) |> 
  pull()

winner_items <- loadouts |>
  filter(season == filtered_season, name == winner) |>
  select(item) |>
  pull()

unique_loadouts <- loadouts |>
  filter(season == filtered_season) |>
  distinct(name, item)

other_items_count <- unique_loadouts |>
  group_by(item) |>
  summarize(count = n()) |>
  mutate(brought_by_winner = item %in% winner_items, 
         color = ifelse(brought_by_winner, "blue", "red")) |>
  arrange(desc(count)) |>
  mutate(item = fct_reorder(item, count)) 

ggplot(other_items_count) +
  geom_segment(aes(x = item, y = count, xend = item, yend = 0, color = brought_by_winner)) +
  geom_point(aes(x = item, y = count, color = brought_by_winner)) +
  scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red")) + 
  theme_minimal() +
  scale_y_continuous(breaks = seq(0, max(other_items_count$count), by = 2)) + #GPT
  coord_flip() +
  labs(title = "season",
       x = "Item",
       y = "Count",
       color = "Brought by Winner")
```
  
# Age VS Days Lasted Test PLot

```{r}
#| echo: false
#| output: false
#| warning: false
days_df <- survivalists |>
  mutate(won = ifelse(result == 1, TRUE, FALSE)) |>
  select(days_lasted, age, won)
```

```{r}
ggplot(days_df, aes(x = age, y = days_lasted, color = won)) +
  geom_point(size = 3) + 
  labs(
    title = "Age vs. Days",
    x = "Age",
    y = "Days Lasted",
    color = "Won"
  ) +
  scale_color_manual(values = c("red", "blue")) +  
  theme_minimal() 
```

# AVG Days Season VS AVG Days Series Test Plot

```{r}
season_days <- survivalists |>
  filter(season == filtered_season)

average_days <- survivalists |>
  group_by(result) |>
  summarize(average_days_lasted = mean(days_lasted))
```

```{r}
ggplot() +
  geom_line(data = season_days, aes(x = result, y = days_lasted), 
            color = "blue", size = 1) +
  geom_point(data = season_days, aes(x = result, y = days_lasted), 
             color = "blue", size = 2.5) + 
  geom_line(data = average_days, aes(x = result, y = average_days_lasted), 
            color = "red", size = 1) +
  geom_point(data = average_days, aes(x = result, y = average_days_lasted), 
             color = "red", size = 2.5) +
  labs(
    title = "Average Days Series vs Season",
    x = "Placement",
    y = "Days Lasted") +
  theme_minimal()
```

# SHINY APP

```{r}
ui <- fluidPage(
  titlePanel("Visualising Data From 'Alone'"),
  sidebarLayout(
    sidebarPanel(
      selectInput("season", label = "Select a Season:", 
                  choices = seasons$season |> unique(), 
                  selected = 1
      )  
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Survivalists Age",
          fluidRow(
            column(6, plotOutput("days_static_plot")),
            column(12, plotOutput("days_reactive_plot"))
          )
        ),
        tabPanel("Loadouts",
          fluidRow(
            plotOutput("items_plot")
          )
        ),
        tabPanel("Seasons Days",
          fluidRow(
            plotOutput("season_series_plot")
          )
        )
      )
    )
  )
)

server <- function(input, output, session) {
  
##------Winner Items Plot-------------------------------------------------------  
  winner_reactive <- reactive({
    survivalists |>
      filter(season == input$season, result == 1) |>
      select(name) |>
      pull()
  })
  
  winner_items_reactive <- reactive({
    winner_items <- loadouts |>
      filter(season == input$season, name == winner) |>
      select(item) |>
      pull()
  })
  
  unique_loadouts_reactive <- reactive({
    unique_loadouts <- loadouts |>
      filter(season == input$season) |>
      distinct(name, item)
  })
  
  other_items_count_reactive <- reactive({
    other_items_count <- unique_loadouts_reactive() |>
      group_by(item) |>
      summarize(count = n()) |>
      mutate(
        brought_by_winner = item %in% winner_items,
        color = ifelse(brought_by_winner, "blue", "red")
      ) |>
      arrange(desc(count)) |>
      mutate(item = fct_reorder(item, count))
  })
  
  output$items_plot <- renderPlot({
    ggplot(other_items_count_reactive()) +
      geom_segment(aes(
        x = item,
        y = count,
        xend = item,
        yend = 0,
        color = brought_by_winner
      )) +
      geom_point(aes(x = item, y = count, color = brought_by_winner)) +
      scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
      theme_minimal() +
      scale_y_continuous(breaks = seq(0, max(other_items_count$count), by = 2)) + #GPT
      coord_flip() +
      labs(
        title = "Number of Contestants Who Also Brought the 'Winning' Items",
        x = "Item",
        y = "Count",
        color = "Brought by Winner"
      )
  })
##------Winner Items Plot-------------------------------------------------------  

##------Season Days VS Series Days Plot-----------------------------------------
  season_days_reactive <- reactive({
    season_days <- survivalists |>
      filter(season == input$season)
  })
  
  average_days <- survivalists |>
    group_by(result) |>
    summarize(average_days_lasted = mean(days_lasted))
  
  output$season_series_plot <- renderPlot({
    ggplot() +
      geom_line(
        data = season_days_reactive(),
        aes(x = result, y = days_lasted),
        color = "blue",
        size = 1
      ) +
      geom_point(
        data = season_days_reactive(),
        aes(x = result, y = days_lasted),
        color = "blue",
        size = 2.5
      ) +
      geom_line(
        data = average_days,
        aes(x = result, y = average_days_lasted),
        color = "red",
        size = 1
      ) +
      geom_point(
        data = average_days,
        aes(x = result, y = average_days_lasted),
        color = "red",
        size = 2.5
      ) +
      labs(title = "Average Days Series vs Season",
           x = "Placement",
           y = "Days Lasted") +
      theme_minimal()
  })
##------Season Days VS Series Days Plot-----------------------------------------
  
##------Days VS Age Plot--------------------------------------------------------
  days_reactive <- reactive({
    days <- survivalists |>
      filter(season == input$season) |>
      mutate(won = ifelse(result == 1, TRUE, FALSE)) |>
      select(days_lasted, age, won)
  })
  
  days_static <- survivalists |>
    mutate(won = ifelse(result == 1, TRUE, FALSE)) |>
    select(days_lasted, age, won)
  
  output$days_static_plot <- renderPlot({
    ggplot(days_reactive(), aes(x = days_lasted, y = age, color = won)) +
      geom_point(size = 3) +
      labs(
        title = "Age vs. Days Reactive",
        y = "Age",
        x = "Days Lasted",
        color = "Won"
      ) +
      scale_color_manual(values = c("red", "blue")) +
      theme_minimal()
  })
  
  output$days_reactive_plot <- renderPlot({
    ggplot(days_static, aes(x = days_lasted, y = age, color = won)) +
      geom_point(size = 3) +
      labs(
        title = "Age vs. Days Still",
        y = "Age",
        x = "Days Lasted",
        color = "Won"
      ) +
      scale_color_manual(values = c("red", "blue")) +
      theme_minimal()
  })
##------Days VS Age Plot--------------------------------------------------------

}

shinyApp(ui = ui, server = server)
```

# Other Graphs

## Profession of Survivalists

```{r}
ggplot(survivalists, aes(x = profession)) +
  geom_bar() +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Each Seasons Items

```{r}
ggplot(loadouts, aes(x = as.factor(season), fill = item)) +
  geom_bar(position = "dodge") +
  theme_minimal()
```

## Most Popular Items

```{r}
ggplot(loadouts, aes(x = item)) +
  geom_bar() +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Gender Plot

```{r}
ggplot(survivalists, aes(x = as.factor(season), fill = gender)) +
  geom_bar(position = "dodge") +
  labs(title = "gender", x = "season", y = "count", fill = "gnder") +
  theme_minimal()
```

## IMDB Ratings

```{r}
ggplot(episodes, aes(x = as.factor(season), y = imdb_rating)) +
  geom_boxplot() +
  theme_minimal()
```

## Viewers VS Days Lasted per Season

```{r}
avg_days <- survivalists |>
  group_by(season) |>
  summarize(avg_days_lasted = mean(days_lasted))

avg_viewers <- episodes |>
  group_by(season) |>
  summarize(avg_viewers = mean(viewers))

comparison_df <- merge(avg_days, avg_viewers, by = "season")

ggplot(comparison_df, aes(x = avg_days_lasted, y = avg_viewers)) +
  geom_point() +
  theme_minimal()
```