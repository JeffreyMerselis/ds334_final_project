---
title: "Alone"
author: "Jeffrey Merselis"
execute: 
  warning: false
format: 
  html:
    embed-resources: true
    toc: true
    theme: darkly
---

```{r}
library(tidyverse)
library(shiny)
```

```{r}
survivalists <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/survivalists.csv')
loadouts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/loadouts.csv')
episodes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/episodes.csv')
seasons <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/seasons.csv')

view(survivalists)
view(loadouts)
view(episodes)
view(seasons)
```

```{r}
# remove winners items from the count, nothing should be >9
# remove/identify duplicate items (some people bring the same thing twice or more)

placing_df <- survivalists |>
  unite("name", c(name, season), sep = " s:") |>
  select(name, result) 

extra_loadouts <- loadouts |>
  mutate(season_num = season) |>
  unite("name", c(name, season), sep = " s:") |>
  mutate(season = season_num) |>
  select(-season_num)

results_loadouts <- left_join(placing_df, extra_loadouts, by = c("name" = "name")) |>
  filter(season == 5)

winners_loadouts9 <- results_loadouts |>
  filter(season == 5) |>
  filter(result == 1) |>
  select(item)

losers_loadouts9 <- results_loadouts |>
  filter(season == 5) |>
  filter(result != 1) |>
  select(item)

count_loadout9 <- results_loadouts |>
  filter(season == 5) |>
  group_by(item) |>
  summarise(count = n())

winning_items_count <- inner_join(count_loadout9, winners_loadouts9, by = c("item" = "item")) |>
  arrange(desc(count)) |>
  mutate(item = fct_reorder(item, count)) 

losing_items_count <- anti_join(count_loadout9, winners_loadouts9, by = c("item" = "item")) |>
  arrange(desc(count)) |>
  mutate(item = fct_reorder(item, count)) 
```

```{r}
# graph of all seasons winning vs losing items

```

placing_df <- survivalists |>
  select(name, result) |>
  mutate(won = if_else(result == TRUE, TRUE == 1, FALSE == 2))

results_loadouts <- left_join(placing_df, loadouts, by = c("name" = "name")) 

winners_loadouts9 <- results_loadouts |>
  filter(season == 2) |>
  filter(won == T) |>
  select(item)

losers_loadouts9 <- results_loadouts |>
  filter(season == 2) |>
  filter(won == F) |>
  select(item)

count_loadout9 <- results_loadouts |>
  filter(season == 2) |>
  group_by(item) |>
  summarise(count = n())

winning_items_count <- inner_join(count_loadout9, winners_loadouts9, by = c("item" = "item")) |>
  arrange(desc(count)) |>
  mutate(item = fct_reorder(item, count)) 

losing_items_count <- anti_join(count_loadout9, winners_loadouts9, by = c("item" = "item")) |>
  arrange(desc(count)) |>
  mutate(item = fct_reorder(item, count)) 
```{r}
ggplot() +
  geom_segment(data = losing_items_count, 
               aes(x = item, y = count, xend = item, yend = 0, color = "blue")) +
  geom_segment(data = winning_items_count, 
               aes(x = item, y = count, xend = item, yend = 0, color = "red")) +
  geom_point(data = losing_items_count, 
             aes(x = item, y = count, color = "blue")) + 
  geom_point(data = winning_items_count, 
             aes(x = item, y = count, color = "red")) + 
  theme_minimal() +
  coord_flip() +
  labs(title = "Number of Contestants Who Also Brought the 'Winning' Items",
       subtitle = "*Items in Red Were NOT Brought by the Winner",
       x = "Item",
       y = "Count") +
  guides(color = "none")
```

```{r}
new_names <- c("Place", "season", "Name", "Age", "Gender", "Home Town", "Days Lasted", "Tap Out Reason", "Team", "Day Linked Up", "Profession")

survivalists_info_df <- survivalists |> 
      select(result, everything()) |>
      select(-reason_category, -medically_evacuated, -url) |>
      unite(location, city, state, country, sep = ", ") |>
      rename_with(~new_names, everything())
```

```{r}
season_info_names <- c("Location", "Country", "Survivors", "Latitude", "Longitude", "Drop off Date")

episode_info_names <- c("Episode Number", "Episode Title", "Air Date", "Overall Episode Number")

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      selectInput("season", label = "Select a Season:",
                  choices = seasons$season |> unique()
      )
    ),
    mainPanel(
      plotOutput("items_plot"),
      dataTableOutput("season_info_table"),
      dataTableOutput("survivalists_table"),
      dataTableOutput("episodes_table")
    )
  )
)

server <- function(input, output, session) {
  
  output$season_info_table <- renderDataTable({
    seasons |>
      filter(season == input$season) |>
      select(-version, -season) |>
      rename_with(~season_info_names, everything())
  })
  
  output$survivalists_table <- renderDataTable({
    survivalists_info_df |>
      filter(season == input$season) |>
      mutate(`Day Linked Up` = ifelse(season != 4, "Exclusive to season 4.", `Day Linked Up`)) |>
      mutate(Team = ifelse(season != 4, "Exclusive to season 4.", Team)) |>
      select(-season)
  })

  output$episodes_table <- renderDataTable({
    episodes |>
      filter(season == input$season) |>
      select(-viewers, -version, -season, -quote, -author, -imdb_rating, -n_ratings) |>
      select(episode, title, air_date, episode_number_overall) |>
      rename_with(~episode_info_names, everything())
  })
## ITEMS PLOT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
  winners_reactive <- reactive({
    winners_loadouts <- results_loadouts |>
      filter(season == input$season) |>
      filter(result == 1) |>
      select(item)
  })
  
  count_reactive <- reactive({
    count_loadout <- results_loadouts |>
      filter(season == input$season) |>
      group_by(item) |>
      summarise(count = n())
  })
  
  win_count_items_reactive <- reactive({
    winning_items_count <- inner_join(count_reactive(), winners_reactive(), by = c("item" = "item")) |>
      arrange(desc(count)) |>
      mutate(item = fct_reorder(item, count)) 
  })
  
  output$items_plot <- renderPlot({
    ggplot() +
      geom_segment(data = win_count_items_reactive(), 
                   aes(x = item, y = count, xend = item, yend = 0, color = "blue")) +
      geom_point(data = win_count_items_reactive(), 
                 aes(x = item, y = count, color = "blue")) + 
      theme_minimal() +
      coord_flip() +
      labs(title = "Number of Contestants Who Also Brought the 'Winning' Items",
           subtitle = "*Items in Red Were NOT Brought by the Winner",
           x = "Item",
           y = "Count") +
      guides(color = "none")
  })
## ITEMS PLOT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
}

shinyApp(ui, server)
```

winners_reactive <- reactive({
    winners_loadouts <- results_loadouts |>
      filter(season == input$season) |>
      filter(won == T) |>
      select(item)
  })
  
  losers_reactive <- reactive({
    losers_loadouts <- results_loadouts |>
      filter(season == input$season) |>
      filter(won == F) |>
      select(item)
  })
  
  count_reactive <- reactive({
    count_loadout <- results_loadouts |>
      filter(season == input$season) |>
      group_by(item) |>
      summarise(count = n())
  })
  
  win_count_items_reactive <- reactive({
    winning_items_count <- inner_join(count_reactive(), winners_reactive(), by = c("item" = "item")) |>
      arrange(desc(count)) |>
      mutate(item = fct_reorder(item, count)) 
  })
  
  lose_count_items_reactive <- reactive({
    losing_items_count <- anti_join(count_reactive(), losers_reactive(), by = c("item" = "item")) |>
      arrange(desc(count)) |>
      mutate(item = fct_reorder(item, count)) 
  })
  
  output$items_plot <- renderPlot({
    ggplot() +
      geom_segment(data = lose_count_items_reactive(), 
                   aes(x = item, y = count, xend = item, yend = 0, color = "blue")) +
      geom_segment(data = win_count_items_reactive(), 
                   aes(x = item, y = count, xend = item, yend = 0, color = "red")) +
      geom_point(data = lose_count_items_reactive(), 
                 aes(x = item, y = count, color = "blue")) + 
      geom_point(data = win_count_items_reactive(), 
                 aes(x = item, y = count, color = "red")) + 
      theme_minimal() +
      coord_flip() +
      labs(title = "Number of Contestants Who Also Brought the 'Winning' Items",
           subtitle = "*Items in Red Were NOT Brought by the Winner",
           x = "Item",
           y = "Count") +
      guides(color = "none")
  })




